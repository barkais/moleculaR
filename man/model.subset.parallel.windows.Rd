% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_parallel_linear_models.R
\name{model.subset.parallel.windows}
\alias{model.subset.parallel.windows}
\title{Parallelized Subset Feature Selection with Correlation Threshold (Windows-Compatible)}
\usage{
model.subset.parallel.windows(
  data,
  out.col = dim(data)[2],
  min = 2,
  max = floor(dim(data)[1]/5),
  results_name = "results_df",
  folds = nrow(data),
  iterations = 1,
  cutoff = 0.65,
  cor.threshold = 1,
  min_models = 50,
  verbose = TRUE
)
}
\arguments{
\item{data}{A data frame containing the features and the target column.}

\item{out.col}{An integer indicating the column index of the target variable (default: last column).}

\item{min}{The minimum number of features to include in a subset (default: 2).}

\item{max}{The maximum number of features to include in a subset (default: floor(nrow(data) / 5)).}

\item{results_name}{Base name for temporary files storing model results (default: 'results_df').}

\item{folds}{Number of folds for cross-validation (default: number of rows in `data`).}

\item{iterations}{Number of iterations for cross-validation (default: 1).}

\item{cutoff}{Initial R-squared cutoff for model selection (default: 0.65). The function adaptively adjusts
this value if too few models meet the initial threshold.}

\item{cor.threshold}{Pearson correlation threshold for feature selection (default: 0.7). Variable pairs with
absolute correlation exceeding this value will not appear together in the same model.}

\item{min_models}{Minimum number of models to retain for cross-validation (default: 50). The function
adaptively adjusts the cutoff to ensure at least this many models are evaluated.}

\item{verbose}{Logical indicating whether to print progress information (default: TRUE).}
}
\value{
A data frame with the best models (up to 15), ranked by cross-validated Q-squared value. 
        The data frame contains columns for each model's formula, R-squared, Q-squared, MAE, and 
        a Model number.
}
\description{
This function provides a Windows-compatible implementation of model.subset.parallel. 
It generates all possible subsets of features in a user-defined range (min to max), 
ensuring that no two variables in a subset have a Pearson correlation coefficient above the
specified correlation threshold. It performs parallel computation using Windows-friendly 
approaches (parLapply instead of mclapply) and handles large feature spaces efficiently.
}
\details{
This Windows-compatible version works identically to model.subset.parallel, but it uses 
parallel::makeCluster and parallel::parLapply instead of parallel::mclapply for parallel 
processing. This avoids the limitation of mclapply on Windows, which doesn't support 
true parallelism and falls back to sequential processing.

The function works in several stages:
1. For each feature subset size from `min` to `max`, it generates combinations and filters them
   based on the correlation threshold.
2. It evaluates models for these combinations in parallel using Windows-friendly parallelization,
   saving results to temporary files.
3. If too few models meet the initial R-squared cutoff, it adaptively lowers the threshold.
4. It performs cross-validation on the top models to compute Q-squared and MAE values.
5. It ranks the final models by Q-squared and returns the top 15.

Like its non-Windows counterpart, this function handles memory constraints by processing 
combinations in chunks and writing intermediate results to disk.
}
